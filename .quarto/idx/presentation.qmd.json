{"title":"Git Overview","markdown":{"yaml":{"title":"Git Overview","author":"Patrick Daniel","format":{"revealjs":{"slide-number":true,"logo":"media/sammy.png","preview-links":true,"css":"styles.css"}}},"headingText":"\"Add, Commit, and Push: an introduction to git\" #","containsRefs":false,"markdown":"\n\n<!-- ![](media/git-poster.png) -->\n<div style=\"-webkit-column-count: 2;\">\n<div>\n![](media/git-poster.png){top=\"170\" left=\"100\" width=\"400\" }\n</div>\n<!-- <img src=\"media/git-poster.png\" width=400> -->\n<div>\n        A guide to demystifying and getting started with version control.\n</div>\n</div>\n\n## Version Control ##\n\nA way of __tracking__ and <u>managing</u> changes made to files overtime.\n<br>  \n__git__ is very popular, but other open VC include:\n\n- Mercurial\n- SVN\n- Source Code Control System\n\n## What is git?##\n![](https://upload.wikimedia.org/wikipedia/commons/e/e0/Git-logo.svg){width=\"200\"}\n\n__Free, open source, distributed, version control system__  \n\nGit is a software for managing software development through time and space.  \n\nCreated by: Linus Torvalds (created the Linux Kernel)\n![](https://upload.wikimedia.org/wikipedia/commons/e/e8/Lc3_2018_%28263682303%29_%28cropped%29.jpeg){width=\"200\"}\n\n\n## What about Github? ##\n\nGithub is a __Microsoft__ owned business service that is used to store and distribute code repositories (and many other very useful services). <br>\nSome other DevOP git-based repository:\n\n- bitbucket (Atlassian)\n- gitlab (open core: git.ucsc.edu)\n- HuggingFace (for Models and Datasets (large data))\n\nThese services all use the `git` software as the foundation for Version Control.\n\n\n## What problems does VC solve? ##\n__Scenario__\n\n::: {.fragment .fade-in}\n```\nYou've made some big changes to your code and things aren't working and now your results make no sense. Now you have to thumb through 10 different files called something like `final_PLS_MBAY_Fall_v2_new.py`.\n```\n:::\n\n::: {.fragment .fade-in}\n__Scenario__\n```\nYou are working with a collaborator on an analysis and want to incorporate some changes they made without having to start over on your changes.\n```\n:::\n\n::: {.fragment .fade-in}\n__Scenario__\n```\nYou published some results and are getting questions about what parameters you used for a model, but you have since developed the project further and don't remeber what you did.\n```\n:::\n\n::: {.fragment .fade-in}\n__Scenario__\n```\nYou need to send a project (code,data,figures) to collaborator but things are getting out of control with the number of files.\n```\n:::\n\n## Version contrtol ##\n<div style=\"-webkit-column-count: 2;\">\n\n<div>\n![](https://book.the-turing-way.org/_images/project-history.svg){width=\"400\"}\n</div>\n<!-- <img src=\"media/git-poster.png\" width=400> -->\n<div>\nVC Enables:<br><br>\n<b>Information Proveneance</b><br>\n<b>Reproducabilty</b><br>\n<b>Tidiness</b><br>\n\n</div>\n</div>\nThese are all virtues that fall under the FAIR science framework.\n\n::: footer\nFAIR (Findability, Accessibility, Interoperability, and Resue): [Go FAIR ORG](https://www.go-fair.org/fair-principles/)\n:::\n\n\n## However, GitHUB is NOT a Data Repository\n\nThere is no guaranetee that something you upload to github will persist. <br>\n\nSo if you want to __archive__ data or code with a paper or dataset there are other places to put it so that it will not dissapear one day if you lose your account or Microsoft changes their business models.\n\nSee __Zenodo__ or __DataOne__ or more domain specific data repositories (GBIF, OBIS, WOD)\n\n## Basic GIT workflow ##\n\n1. Create files - these may contain text, code or both.\n2. Work on these files, by changing, deleting or adding new content.\n3. Create a snapshot of the file status (also known as version) at this time.\n4. Document what was changed in the version history of that file.\n\n\n::: footer\nText and Figures from: https://book.the-turing-way.org\n:::\n\n## Linear Development ##\n\n<br>\n<br>\n![](https://book.the-turing-way.org/_images/main-branch.png)\n<br>\n<br>\nSuppose you need to get back to a previous version of your code.\n\nThis alone solves a lot of problems\n\n## Non-linear Development ##\n__Adding a Feature:__\n<br>\n![](https://book.the-turing-way.org/_images/one-branch.png)\n<br>\n\nYou maybe working on a new feature that allows you to read different types of files, but processes still runs the same analysis. \n\n__When that standalone feature is completed, it can be added back into the main working branch__\n\n## Non-linear Development ##\n__Real Life Development:__\n<br>\n![](https://book.the-turing-way.org/_images/sub-branch.png)\n<br>\n\nHere things may get more complicated, suppose you start and abandon something (Feature B) or your data-reader gets expanded further during development (Feature A to Feature A-1).\n\nThis may seem like overkill for  a project that you are working on yourself, but if you develop a popular package and others start to ask for features or better yet, offer to add their own features, this is what modern software development looks like.\n\n# Start Your Engines #\n\n## The basics of Git ##\n\n__`git init`__:_initialize_ a git repository in your current directory.\nThis will create a hidden file called .git.  \n__`git add file.txt`__:Tells git to start tracking this file for changes. More likely you will add many files at once.  \n__`git commit`__:Tells git that you want to commit all of the changes to the tracked files (from the previous step).  \n__`git push`__:Push the changes to a remote repository like __Github__ or __gitlab__\n\n## Try it out ##\n\n__Let's all try this out in the `command line`__:\n\n- Open a terminal.\n- Make a new directory: `mkdir learning-git`\n- Move into that diretory: `cd learning-git`\n- Initialize a repo: `git init`  \n- Check what is going on: `git status` (you should see some about 'No commits yet', if it says fatal, no repo was initialized)  \n\n## Checking if it worked ##\n<br>\nTry running: __`git status`__\n<br>\n![](media/git-status.png)\n\n## Now Make a file and add it to git ##\n<br>\n\n```bash\n   touch file.txt #This will make an empty file call file.txt\n   git add file.txt\n   git status\n```\n__These are 'staged' changes__\n![](media/git-status-2.png)\n\n## Commit! ##\n\n\n\n```bash\n   git commit\n```\n\n\ngit expects a message when you make a commit, so it may open `vim` editor.   \n\n- `vim`: type in your messages, press `esc`, then `:x` to write out to the file. Ask if you are stuck!\n\n__Tip: Make you messages meaningful, but short__\n\n__Instead, include an inline message:__\n```bash\n   git commit -m \"This is my commit message\"\n```\n\n\n##\n__`git log`__\n\n![](media/git-log.png)\n\n<p style='font-size:16px;'>This shows our last commit, the hash associated with it, and the message</p>\n\n\n## Excercise ##\n\n1. Add some text to the file.txt\n2. Add the file to git (hint: __`git add .`__ will add all files in dir)\n3. Commit the staged files\n4. View the log\n\n## Reverting to Old Commits\n\nWhat if you want to go back to an older commit?\n\n![](media/git-log-2.png)\n\nLast Commit: __`git revert HEAD`__ (this is like a reverse commit)\n\nOlder Commit: __`git checkout 4d95c68fa8060e34f08d9e4309d13873af9a5881`__ (enter the hash of that commit, not mine)\n\nThis called a __\"detached HEAD\"__ --> If you want to go in a direction you need a __branch__\n\n## Branches: Creating ##\n![](https://book.the-turing-way.org/_images/one-branch.png)\n\nThose splits are called branches, this a nice way to try something without writing over the `main` branch.\n\n<br>\n<br>\nTo Create and Switch to a new Branch:  \n\n  \n__`git checkout -b name_of_your_new_branch`__\n\n## Branches: Switching Between ##\n\n__`git branch`__<p style=\"font-size: 22px;\">show different branches</p>\n\n__`git checkout name_of_branch`__<p style=\"font-size: 22px;\">change to the `name_of_branch` branch</p>\n\n__`git branch -D name_of_branch`__<p style=\"font-size: 22px;\">Delete `name_of_branch` branch</p>\n\n\n<p style=\"font-size: 22px;\">Note: `main` is the default branch. (Used to be `master`, but this has been phased out)</p>\n\n__Excercise__:\n\nCreate and checkout a new branch. Add a file to it and commit the new file (and any other changes)\n\n## Merging Branches\n\nOnce you have completed the cool feature that you want to integrate into the `main` branch, you will need to __`merge`__.\n\nMove into the the branch that you want merged into.\n\n__`git merge name_of_branch`__\n\n<br>\n<br>\n\n<p style=\"font-size: 22px;\">You can get into trouble here if you make changes to your `main` branch and that will conflict with the changes make in your other branch that you are trying to merge in. This is a bit beyond the scope of what we are talking about here, but it will be illustrated later.</p>\n\n# Break #\n\nLet's take a short break. Ask Question\n\nThe next part will be working with github.\n\n## Working With Github ##","srcMarkdownNoYaml":"\n\n## \"Add, Commit, and Push: an introduction to git\" #\n<!-- ![](media/git-poster.png) -->\n<div style=\"-webkit-column-count: 2;\">\n<div>\n![](media/git-poster.png){top=\"170\" left=\"100\" width=\"400\" }\n</div>\n<!-- <img src=\"media/git-poster.png\" width=400> -->\n<div>\n        A guide to demystifying and getting started with version control.\n</div>\n</div>\n\n## Version Control ##\n\nA way of __tracking__ and <u>managing</u> changes made to files overtime.\n<br>  \n__git__ is very popular, but other open VC include:\n\n- Mercurial\n- SVN\n- Source Code Control System\n\n## What is git?##\n![](https://upload.wikimedia.org/wikipedia/commons/e/e0/Git-logo.svg){width=\"200\"}\n\n__Free, open source, distributed, version control system__  \n\nGit is a software for managing software development through time and space.  \n\nCreated by: Linus Torvalds (created the Linux Kernel)\n![](https://upload.wikimedia.org/wikipedia/commons/e/e8/Lc3_2018_%28263682303%29_%28cropped%29.jpeg){width=\"200\"}\n\n\n## What about Github? ##\n\nGithub is a __Microsoft__ owned business service that is used to store and distribute code repositories (and many other very useful services). <br>\nSome other DevOP git-based repository:\n\n- bitbucket (Atlassian)\n- gitlab (open core: git.ucsc.edu)\n- HuggingFace (for Models and Datasets (large data))\n\nThese services all use the `git` software as the foundation for Version Control.\n\n\n## What problems does VC solve? ##\n__Scenario__\n\n::: {.fragment .fade-in}\n```\nYou've made some big changes to your code and things aren't working and now your results make no sense. Now you have to thumb through 10 different files called something like `final_PLS_MBAY_Fall_v2_new.py`.\n```\n:::\n\n::: {.fragment .fade-in}\n__Scenario__\n```\nYou are working with a collaborator on an analysis and want to incorporate some changes they made without having to start over on your changes.\n```\n:::\n\n::: {.fragment .fade-in}\n__Scenario__\n```\nYou published some results and are getting questions about what parameters you used for a model, but you have since developed the project further and don't remeber what you did.\n```\n:::\n\n::: {.fragment .fade-in}\n__Scenario__\n```\nYou need to send a project (code,data,figures) to collaborator but things are getting out of control with the number of files.\n```\n:::\n\n## Version contrtol ##\n<div style=\"-webkit-column-count: 2;\">\n\n<div>\n![](https://book.the-turing-way.org/_images/project-history.svg){width=\"400\"}\n</div>\n<!-- <img src=\"media/git-poster.png\" width=400> -->\n<div>\nVC Enables:<br><br>\n<b>Information Proveneance</b><br>\n<b>Reproducabilty</b><br>\n<b>Tidiness</b><br>\n\n</div>\n</div>\nThese are all virtues that fall under the FAIR science framework.\n\n::: footer\nFAIR (Findability, Accessibility, Interoperability, and Resue): [Go FAIR ORG](https://www.go-fair.org/fair-principles/)\n:::\n\n\n## However, GitHUB is NOT a Data Repository\n\nThere is no guaranetee that something you upload to github will persist. <br>\n\nSo if you want to __archive__ data or code with a paper or dataset there are other places to put it so that it will not dissapear one day if you lose your account or Microsoft changes their business models.\n\nSee __Zenodo__ or __DataOne__ or more domain specific data repositories (GBIF, OBIS, WOD)\n\n## Basic GIT workflow ##\n\n1. Create files - these may contain text, code or both.\n2. Work on these files, by changing, deleting or adding new content.\n3. Create a snapshot of the file status (also known as version) at this time.\n4. Document what was changed in the version history of that file.\n\n\n::: footer\nText and Figures from: https://book.the-turing-way.org\n:::\n\n## Linear Development ##\n\n<br>\n<br>\n![](https://book.the-turing-way.org/_images/main-branch.png)\n<br>\n<br>\nSuppose you need to get back to a previous version of your code.\n\nThis alone solves a lot of problems\n\n## Non-linear Development ##\n__Adding a Feature:__\n<br>\n![](https://book.the-turing-way.org/_images/one-branch.png)\n<br>\n\nYou maybe working on a new feature that allows you to read different types of files, but processes still runs the same analysis. \n\n__When that standalone feature is completed, it can be added back into the main working branch__\n\n## Non-linear Development ##\n__Real Life Development:__\n<br>\n![](https://book.the-turing-way.org/_images/sub-branch.png)\n<br>\n\nHere things may get more complicated, suppose you start and abandon something (Feature B) or your data-reader gets expanded further during development (Feature A to Feature A-1).\n\nThis may seem like overkill for  a project that you are working on yourself, but if you develop a popular package and others start to ask for features or better yet, offer to add their own features, this is what modern software development looks like.\n\n# Start Your Engines #\n\n## The basics of Git ##\n\n__`git init`__:_initialize_ a git repository in your current directory.\nThis will create a hidden file called .git.  \n__`git add file.txt`__:Tells git to start tracking this file for changes. More likely you will add many files at once.  \n__`git commit`__:Tells git that you want to commit all of the changes to the tracked files (from the previous step).  \n__`git push`__:Push the changes to a remote repository like __Github__ or __gitlab__\n\n## Try it out ##\n\n__Let's all try this out in the `command line`__:\n\n- Open a terminal.\n- Make a new directory: `mkdir learning-git`\n- Move into that diretory: `cd learning-git`\n- Initialize a repo: `git init`  \n- Check what is going on: `git status` (you should see some about 'No commits yet', if it says fatal, no repo was initialized)  \n\n## Checking if it worked ##\n<br>\nTry running: __`git status`__\n<br>\n![](media/git-status.png)\n\n## Now Make a file and add it to git ##\n<br>\n\n```bash\n   touch file.txt #This will make an empty file call file.txt\n   git add file.txt\n   git status\n```\n__These are 'staged' changes__\n![](media/git-status-2.png)\n\n## Commit! ##\n\n\n\n```bash\n   git commit\n```\n\n\ngit expects a message when you make a commit, so it may open `vim` editor.   \n\n- `vim`: type in your messages, press `esc`, then `:x` to write out to the file. Ask if you are stuck!\n\n__Tip: Make you messages meaningful, but short__\n\n__Instead, include an inline message:__\n```bash\n   git commit -m \"This is my commit message\"\n```\n\n\n##\n__`git log`__\n\n![](media/git-log.png)\n\n<p style='font-size:16px;'>This shows our last commit, the hash associated with it, and the message</p>\n\n\n## Excercise ##\n\n1. Add some text to the file.txt\n2. Add the file to git (hint: __`git add .`__ will add all files in dir)\n3. Commit the staged files\n4. View the log\n\n## Reverting to Old Commits\n\nWhat if you want to go back to an older commit?\n\n![](media/git-log-2.png)\n\nLast Commit: __`git revert HEAD`__ (this is like a reverse commit)\n\nOlder Commit: __`git checkout 4d95c68fa8060e34f08d9e4309d13873af9a5881`__ (enter the hash of that commit, not mine)\n\nThis called a __\"detached HEAD\"__ --> If you want to go in a direction you need a __branch__\n\n## Branches: Creating ##\n![](https://book.the-turing-way.org/_images/one-branch.png)\n\nThose splits are called branches, this a nice way to try something without writing over the `main` branch.\n\n<br>\n<br>\nTo Create and Switch to a new Branch:  \n\n  \n__`git checkout -b name_of_your_new_branch`__\n\n## Branches: Switching Between ##\n\n__`git branch`__<p style=\"font-size: 22px;\">show different branches</p>\n\n__`git checkout name_of_branch`__<p style=\"font-size: 22px;\">change to the `name_of_branch` branch</p>\n\n__`git branch -D name_of_branch`__<p style=\"font-size: 22px;\">Delete `name_of_branch` branch</p>\n\n\n<p style=\"font-size: 22px;\">Note: `main` is the default branch. (Used to be `master`, but this has been phased out)</p>\n\n__Excercise__:\n\nCreate and checkout a new branch. Add a file to it and commit the new file (and any other changes)\n\n## Merging Branches\n\nOnce you have completed the cool feature that you want to integrate into the `main` branch, you will need to __`merge`__.\n\nMove into the the branch that you want merged into.\n\n__`git merge name_of_branch`__\n\n<br>\n<br>\n\n<p style=\"font-size: 22px;\">You can get into trouble here if you make changes to your `main` branch and that will conflict with the changes make in your other branch that you are trying to merge in. This is a bit beyond the scope of what we are talking about here, but it will be illustrated later.</p>\n\n# Break #\n\nLet's take a short break. Ask Question\n\nThe next part will be working with github.\n\n## Working With Github ##"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","css":["styles.css"],"output-file":"presentation.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.40","auto-stretch":true,"title":"Git Overview","author":"Patrick Daniel","slideNumber":true,"logo":"media/sammy.png","previewLinks":true}}},"projectFormats":["html"]}