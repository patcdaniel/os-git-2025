[
  {
    "objectID": "presentation.html#add-commit-and-push-an-introduction-to-git",
    "href": "presentation.html#add-commit-and-push-an-introduction-to-git",
    "title": "Git Overview",
    "section": "“Add, Commit, and Push: an introduction to git”",
    "text": "“Add, Commit, and Push: an introduction to git”\n\n\n\n\n\n\n\n    A guide to demystifying and getting started with version control."
  },
  {
    "objectID": "presentation.html#version-control",
    "href": "presentation.html#version-control",
    "title": "Git Overview",
    "section": "Version Control",
    "text": "Version Control\n\n\nA way of tracking and managing changes made to files overtime.\ngit is very popular, but other open VC include:\n\nMercurial\nSVN\nSource Code Control System"
  },
  {
    "objectID": "presentation.html#what-is-git",
    "href": "presentation.html#what-is-git",
    "title": "Git Overview",
    "section": "What is git?",
    "text": "What is git?\n\n\n\n\n\nFree, open source, distributed, version control system\nGit is a software for managing software development through time and space.\n\n\n\n\n\nCreated by: Linus Torvalds (created the Linux Kernel)"
  },
  {
    "objectID": "presentation.html#what-about-github",
    "href": "presentation.html#what-about-github",
    "title": "Git Overview",
    "section": "What about Github?",
    "text": "What about Github?\nGithub (Microsoft) is a DevOPS service used to store and distribute code repositories that uses git. \nSome other DevOP git-based repository:\n\n\nbitbucket (Atlassian)\ngitlab (open core: git.ucsc.edu)\nHuggingFace (for Models and Datasets (large data))"
  },
  {
    "objectID": "presentation.html#what-problems-does-vc-solve",
    "href": "presentation.html#what-problems-does-vc-solve",
    "title": "Git Overview",
    "section": "What problems does VC solve?",
    "text": "What problems does VC solve?\nScenario\n\nYou've made some big changes to your code and things aren't working and now your results make no sense. Now you have to thumb through 10 different files called something like `final_PLS_MBAY_Fall_v2_new.py`.\n\n\nScenario\nYou are working with a collaborator on an analysis and want to incorporate some changes they made without having to start over on your changes.\n\n\nScenario\nYou published some results and are getting questions about what parameters you used for a model, but you have since developed the project further and don't remeber what you did.\n\n\nScenario\nYou need to send a project (code,data,figures) to collaborator but things are getting out of control with the number of files."
  },
  {
    "objectID": "presentation.html#version-contrtol",
    "href": "presentation.html#version-contrtol",
    "title": "Git Overview",
    "section": "Version contrtol",
    "text": "Version contrtol\n\n\n\n\n\n\nVC Enables: Information Proveneance Reproducabilty Tidiness\n\n\nThese are all virtues that fall under the FAIR science framework.\n\nFAIR (Findability, Accessibility, Interoperability, and Resue): Go FAIR ORG"
  },
  {
    "objectID": "presentation.html#however-github-is-not-a-data-repository",
    "href": "presentation.html#however-github-is-not-a-data-repository",
    "title": "Git Overview",
    "section": "However, GitHUB is NOT a Data Repository",
    "text": "However, GitHUB is NOT a Data Repository\n\nThere is no guaranetee that something you upload to github will persist. \n\n\n\nBetter places to archive data or code with a paper or dataset, though better than nothing!\n\n\n\nSee Zenodo or DataOne or more domain specific data repositories (GBIF, OBIS, WOD)"
  },
  {
    "objectID": "presentation.html#basic-git-workflow",
    "href": "presentation.html#basic-git-workflow",
    "title": "Git Overview",
    "section": "Basic GIT workflow",
    "text": "Basic GIT workflow\n\n\nCreate files - these may contain text, code or both.\nWork on these files, by changing, deleting or adding new content.\nCreate a snapshot of the file status (also known as version) at this time.\nDocument what was changed in the version history of that file.\n\n\n\nText and Figures from: https://book.the-turing-way.org"
  },
  {
    "objectID": "presentation.html#linear-development",
    "href": "presentation.html#linear-development",
    "title": "Git Overview",
    "section": "Linear Development",
    "text": "Linear Development\n     Suppose you need to get back to a previous version of your code."
  },
  {
    "objectID": "presentation.html#non-linear-development",
    "href": "presentation.html#non-linear-development",
    "title": "Git Overview",
    "section": "Non-linear Development",
    "text": "Non-linear Development\nAdding a Feature:   \nYou maybe working on a new feature that allows you to read different types of files, but processes still runs the same analysis.\n\nWhen that standalone feature is completed, it can be added back into the main working branch"
  },
  {
    "objectID": "presentation.html#non-linear-development-1",
    "href": "presentation.html#non-linear-development-1",
    "title": "Git Overview",
    "section": "Non-linear Development",
    "text": "Non-linear Development\nReal Life Development: \n\nThis may seem like overkill for a project that you are working on yourself, but if you develop a popular package and others start to ask for features or better yet, offer to add their own features, this is what modern software development looks like."
  },
  {
    "objectID": "presentation.html#the-basics-of-git",
    "href": "presentation.html#the-basics-of-git",
    "title": "Git Overview",
    "section": "The basics of Git",
    "text": "The basics of Git\ngit init:initialize a git repository in your current directory. This will create a hidden file called .git.\ngit add file.txt:Tells git to start tracking this file for changes. More likely you will add many files at once.\ngit commit:Tells git that you want to commit all of the changes to the tracked files (from the previous step).\ngit push:Push the changes to a remote repository like Github or gitlab"
  },
  {
    "objectID": "presentation.html#try-it-out",
    "href": "presentation.html#try-it-out",
    "title": "Git Overview",
    "section": "Try it out",
    "text": "Try it out\nLet’s all try this out in the command line:\n\n\nOpen a terminal.\nMake a new directory: mkdir learning-git\nMove into that diretory: cd learning-git\nInitialize a repo: git init\n\nCheck what is going on: git status (you should see some about ‘No commits yet’, if it says fatal, no repo was initialized)"
  },
  {
    "objectID": "presentation.html#checking-if-it-worked",
    "href": "presentation.html#checking-if-it-worked",
    "title": "Git Overview",
    "section": "Checking if it worked",
    "text": "Checking if it worked\n Try running: git status"
  },
  {
    "objectID": "presentation.html#now-make-a-file-and-add-it-to-git",
    "href": "presentation.html#now-make-a-file-and-add-it-to-git",
    "title": "Git Overview",
    "section": "Now Make a file and add it to git",
    "text": "Now Make a file and add it to git\n\n\n Try these bash commands:\n\n\n\ntouch file.txt\ngit add file.txt\ngit status\n\n\n\n\nThese are ‘staged’ changes"
  },
  {
    "objectID": "presentation.html#commit",
    "href": "presentation.html#commit",
    "title": "Git Overview",
    "section": "Commit!",
    "text": "Commit!\n\n\ngit commit  git expects a message when you make a commit, so it may open vim editor.vim: type in your messages, press esc, then :x to write out to the file. Ask if you are stuck!\n\n\n\nInstead, include an inline message:git commit -m \"This is my commit message\""
  },
  {
    "objectID": "presentation.html#section",
    "href": "presentation.html#section",
    "title": "Git Overview",
    "section": "",
    "text": "git log\n\n\nThis shows our last commit, the hash associated with it, and the message"
  },
  {
    "objectID": "presentation.html#excercise",
    "href": "presentation.html#excercise",
    "title": "Git Overview",
    "section": "Excercise",
    "text": "Excercise\n \n\n\nAdd some text to the file.txt\nAdd the file to git (hint: git add . will add all files in dir)\nCommit the staged files\nView the log"
  },
  {
    "objectID": "presentation.html#section-1",
    "href": "presentation.html#section-1",
    "title": "Git Overview",
    "section": "",
    "text": "What if you want to go back to an older commit?\n\n\n\n\n\n\nLast Commit: git revert HEAD (this is like a reverse commit)\nOlder Commit: git checkout 4d95c68fa8060e34f08d9e4309d13873af9a5881 (enter the hash of that commit, not mine)This called a “detached HEAD” –&gt; Not at the front of the branch."
  },
  {
    "objectID": "presentation.html#branches-creating",
    "href": "presentation.html#branches-creating",
    "title": "Git Overview",
    "section": "Branches: Creating",
    "text": "Branches: Creating\n\n\nThose splits are called branches, this a nice way to try something without writing over the main branch.\n\nTo Create and Switch to a new Branch:\ngit checkout -b name_of_your_new_branch"
  },
  {
    "objectID": "presentation.html#branches-switching-between",
    "href": "presentation.html#branches-switching-between",
    "title": "Git Overview",
    "section": "Branches: Switching Between",
    "text": "Branches: Switching Between\n\n\ngit branch\n\nshow different branches\n\ngit checkout name_of_branch\n\nchange to the name_of_branch branch\n\ngit branch -D name_of_branch\n\nDelete name_of_branch branch  Note: main is the default branch. (Used to be master, but this has been phased out)\n\n\n\n\nExcercise:Create and checkout a new branch. Add a file to it and commit the new file (and any other changes)"
  },
  {
    "objectID": "presentation.html#merging-branches",
    "href": "presentation.html#merging-branches",
    "title": "Git Overview",
    "section": "Merging Branches",
    "text": "Merging Branches\nOnce you have completed the cool feature that you want to integrate into the main branch, you will need to merge.\n\n\nMove into the the branch that you want merged into (main). \ngit merge name_of_branch\n\n\n\n\nYou can get into trouble here if you make changes to your main branch and that will conflict with the changes make in your other branch that you are trying to merge in. This is a bit beyond the scope of what we are talking about here, but it will be illustrated later."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "OS Skill Share: Add, Commit, and Push: an introduction to git",
    "section": "",
    "text": "https://xkcd.com/1597/\nThis website provides a step-by-step guide to using Git for version control. Click on Git Basics in the navigation bar to get started."
  },
  {
    "objectID": "index.html#goal",
    "href": "index.html#goal",
    "title": "OS Skill Share: Add, Commit, and Push: an introduction to git",
    "section": "Goal",
    "text": "Goal\nThe goal of this Skill Sharing Workshop is to get everyone introduced to Version Control in scientific computing using git and to get hands on practice “developing” a project with other students."
  },
  {
    "objectID": "index.html#getting-setup",
    "href": "index.html#getting-setup",
    "title": "OS Skill Share: Add, Commit, and Push: an introduction to git",
    "section": "Getting Setup",
    "text": "Getting Setup\n\nInstalling the git CLI\nFor those attending, here things will go much smoother if come with some way to interact with git installed:\nThere are a million ways, but the simplest would be through the command line interface (CLI)\nOn MacOS & Linux (most distros) git is shipped with operating system. The simplest way to check if you have it and what version you are using is to open a terminal (using terminal application) and typing:\ngit --version\nYou should see some repsonse that looks like:\ngit version 2.39.5 (Apple Git-154)\nOn Windows you might want to download git for windows (https://git-scm.com/downloads/win) which includes a Git Bash which can use the CLIs.\n\n\nAfterwards\nOnce we get beyond the CLI, you may want to move to your code editor or IDE of choice (R studio, pycharm, VS Code etc) all have git integrated into them.\nIn VS Code:\n\nIn RStudio:\nIf there is an existing repository, you have to add a “New Project” in that directory first, then you will see:\n\nThese may be a more comfortable way to manage your project, but under the hood, they are really just doing the same couple of commands with `git` that we are going to use"
  }
]